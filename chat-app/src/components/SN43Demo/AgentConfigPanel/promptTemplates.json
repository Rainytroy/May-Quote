{
  "original": {
    "firstStage": "我需要根据用户的输入：\"{#input}\"。来输出 json，这个 json 是一个问卷，用户会输入 inputB1-N，然后点击提交后，顺序调用 promptBlocks 数组中的字符串给到 ai，并依次把内容返回给用户。需要你帮我把要问用户的所有问题都写到 inputBn 中，而在 promptBlock 中不准问问题，以用户在 inputBn 的<def></def>标签中的内容，作为构建生成解决方案或者回答的promptBlock的输入，用1个或多个promptBlock来形成深度的回答。每个promptblock中必须出现至少1种占位符以精准选择需要的上下文，因为数列中的prompts每个都是单独的对话发给大模型，是没有上下文的。写提示词的时候不要把inputBn中<def>标签中的内容写进来，否则会跟inputBn内容冲突。",
    "secondStage": "根据用户的输入：\"{#input}\"，以及ai根据用户输入的初步设计的json文件：\"{#promptResults1}\"，优化其他promptBlock中的提示词，确保每个promptblock至少要有1个{}占位符，写提示词的时候不要把inputBn中<def>标签中的内容写进来，否则会跟inputBn内容冲突。直接输出1个最终优化好的JSON文件。"
  },
  "advanced": {
    "firstStage": "我需要根据用户的输入：\"{#input}\"。来输出 json，这个 json 是一个问卷，需要你帮我把要问用户的所有问题都写到 inputBn 中，而在 promptBlock 中不准问问题。同时，分析用户需求的复杂度，判断是否需要使用多卡片结构。如果用户需求包含多个独立部分（如多个角色、多个场景、多步骤流程等），那么应该使用多卡片结构。在多卡片结构中，每个卡片有自己的adminInputs和promptBlocks，还可以有全局的promptBlocks用于整合多个卡片的结果。",
    "secondStage": "{#firstStagePrompt}\n\n【第一阶段执行结果】\n{#promptResults1}\n\n【用户调整请求】\n用户要求进行以下修改：\"{#input}\"\n\n【第二阶段指导】\n根据用户的调整请求和第一阶段生成的JSON，请优化现有配置。确保每个promptBlock至少包含一个占位符引用（{#input}、{#inputBn}或{#promptBlockn}）。只输出最终的json格式，不要包含任何解释或说明。"
  },
  "iteration_2": {
    "firstStage": "# 多卡片系统提示词构建指南\n\n你是一个优秀的、具备结构化思维的专家，你仔细阅读用户输入的内容：\n\n\"{#input}\"\n\n根据这个内容进行分析和判断，构建结构化的提示词JSON。选择合适的结构（单卡片或多卡片），设计适当的输入字段和提示词块，并确保JSON格式正确、占位符使用恰当。",
    "secondStage": "# 多卡片系统提示词修改指南 (第二阶段)\n\n{#firstStagePrompt}\n\n【最后一次执行结果】\n{#latestResult}\n\n【用户调整请求】\n用户要求进行以下修改：\"{#input}\"\n\n【第二阶段指导】\n根据用户的调整请求和最新JSON，请优化现有配置。重点关注以下方面：\n\n1. card和promptBlock数量：如用户要求特定数量，确保满足\n2. 引用完整性：每个promptBlock至少包含一个占位符引用\n3. 上下文连贯：后续promptBlock应引用前面的promptBlock保持连贯\n4. 输出控制：根据输出长度需求拆分promptBlock\n5. 冲突避免：不要在提示词中包含inputBn的<def>标签内容\n\n直接输出优化后的完整JSON，无需附加说明或解释。"
  }
}
